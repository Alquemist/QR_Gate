{"version":3,"sources":["QR.js","App.js","serviceWorker.js","index.js"],"names":["QRComp","useState","id","code","dT","QRs","setQR","myAxios","axios","create","baseURL","timeout","useEffect","method","url","then","response","data","catch","err","alert","t","Date","setHours","getHours","value","size","className","style","margin","onClick","window","print","toLocaleString","split","splice","join","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"4SAiEeA,G,MA5DA,WAAO,IAAD,EAEIC,mBAAS,CAACC,GAAI,GAAIC,KAAM,GAAIC,GAAI,KAFpC,mBAEVC,EAFU,KAELC,EAFK,KAKXC,EAAUC,IAAMC,OAAQ,CAC1BC,QAAS,wBACTC,QAAS,MAGbC,qBAAW,WACPL,EAAQ,CACRM,OAAQ,MACRC,IAAK,SAEJC,MAAK,SAAAC,GAAQ,OAAIV,EAAMU,EAASC,SAChCC,OAAM,SAAAC,GAAG,OAAEC,MAAMD,QACnB,IAEH,IAYIE,EAAI,IAAIC,KAGZ,OAFAD,EAAEE,SAASF,EAAEG,WAAanB,EAAID,IAG1B,oCAIA,6BACI,kBAAC,IAAD,CACIqB,MAAOpB,EAAIF,KACXuB,KAAM,OAGd,yBAAKC,UAAU,OAAOC,MAAO,CAACC,OAAO,QACjC,4BAASC,QA3BM,WACnBC,OAAOC,QACPzB,EAAQ,CACJM,OAAQ,QACRC,IAAK,OACLG,KAAM,CAAC,GAAMZ,EAAIH,MAEpBa,MAAK,SAAAC,GAAQ,OAAIV,EAAMU,EAASC,SAChCC,OAAM,SAAAC,GAAG,OAAEC,MAAMD,QAmBd,aAEJ,yBAAKQ,UAAU,QACX,uBAAGC,MAAO,CAACC,OAAQ,gBAAnB,sFACwBR,EAAEY,iBAAiBC,MAAM,KAAKC,OAAO,EAAE,GAAGC,KAAK,OAEvE,wBAAIR,MAAO,CAACC,OAAQ,IAApB,8FC1CGQ,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYW,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d674e174.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport QRcode from 'qrcode.react';\r\nimport './QR.css';\r\n\r\nconst QRComp = () => {\r\n\r\n    const [QRs, setQR] = useState({id: '', code: '', dT: ''})\r\n    //const [buttonHidden, setButtonHiden] = useState(false)\r\n\r\n    const myAxios = axios.create ({\r\n        baseURL: 'http://localhost:5000',\r\n        timeout: 1000,\r\n    });\r\n\r\n    useEffect( () => {\r\n        myAxios({\r\n        method: 'get',\r\n        url: '/api'\r\n        })\r\n        .then(response => setQR(response.data))\r\n        .catch(err=>alert(err))\r\n    }, []);\r\n\r\n    const onClickHandler = () => {\r\n        window.print();\r\n        myAxios({\r\n            method: 'patch',\r\n            url: '/api',\r\n            data: {'id': QRs.id},\r\n        })\r\n        .then(response => setQR(response.data))\r\n        .catch(err=>alert(err))\r\n    };\r\n\r\n    //console.log(QRs)\r\n    let t = new Date()\r\n    t.setHours(t.getHours() + QRs.dT)\r\n\r\n    return (\r\n        <>\r\n        {/* <div>\r\n            <h1 style={{color: '#b0750e'}}>КОНЦЕПТ</h1>\r\n        </div> */}\r\n        <div>\r\n            <QRcode\r\n                value={QRs.code}\r\n                size={256}\r\n            />\r\n        </div>\r\n        <div className='hide' style={{margin:'5px'}}>\r\n            <button  onClick={onClickHandler}>Print QR</button>\r\n        </div>\r\n        <div className='show'>\r\n            <p style={{margin: '5px 0 5px 0'}}>\r\n                {`Ваш код важи до ${t.toLocaleString().split(' ').splice(0,5).join(' ')}`}\r\n            </p>\r\n            <h3 style={{margin: 0}}>\r\n                Хвала на посјети\r\n            </h3>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QRComp;","import React from 'react';\nimport './App.css';\nimport QRComp from './QR';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <QRComp\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}